{"ast":null,"code":"/**\n * Lazily iterate over coordinates in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var point = { type: 'Point', coordinates: [0, 0] };\n * coordEach(point, function(coords) {\n *   // coords is equal to [0, 0]\n * });\n */\nfunction coordEach(layer, callback, excludeWrapCoord) {\n  var i,\n      j,\n      k,\n      g,\n      geometry,\n      stopG,\n      coords,\n      geometryMaybeCollection,\n      wrapShrink = 0,\n      isGeometryCollection,\n      isFeatureCollection = layer.type === 'FeatureCollection',\n      isFeature = layer.type === 'Feature',\n      stop = isFeatureCollection ? layer.features.length : 1; // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? layer.features[i].geometry : isFeature ? layer.geometry : layer;\n    isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n      coords = geometry.coordinates;\n      wrapShrink = excludeWrapCoord && (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') ? 1 : 0;\n\n      if (geometry.type === 'Point') {\n        callback(coords);\n      } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {\n        for (j = 0; j < coords.length; j++) {\n          callback(coords[j]);\n        }\n      } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n        for (j = 0; j < coords.length; j++) {\n          for (k = 0; k < coords[j].length - wrapShrink; k++) {\n            callback(coords[j][k]);\n          }\n        }\n      } else if (geometry.type === 'MultiPolygon') {\n        for (j = 0; j < coords.length; j++) {\n          for (k = 0; k < coords[j].length; k++) {\n            for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n              callback(coords[j][k][l]);\n            }\n          }\n        }\n      } else {\n        throw new Error('Unknown Geometry Type');\n      }\n    }\n  }\n}\n\nmodule.exports.coordEach = coordEach;\n/**\n * Lazily reduce coordinates in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all coordinates is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, value) and returns\n * a new memo\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @param {*} memo the starting value of memo: can be any type.\n */\n\nfunction coordReduce(layer, callback, memo, excludeWrapCoord) {\n  coordEach(layer, function (coord) {\n    memo = callback(memo, coord);\n  }, excludeWrapCoord);\n  return memo;\n}\n\nmodule.exports.coordReduce = coordReduce;\n/**\n * Lazily iterate over property objects in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @example\n * var point = { type: 'Feature', geometry: null, properties: { foo: 1 } };\n * propEach(point, function(props) {\n *   // props is equal to { foo: 1}\n * });\n */\n\nfunction propEach(layer, callback) {\n  var i;\n\n  switch (layer.type) {\n    case 'FeatureCollection':\n      features = layer.features;\n\n      for (i = 0; i < layer.features.length; i++) {\n        callback(layer.features[i].properties);\n      }\n\n      break;\n\n    case 'Feature':\n      callback(layer.properties);\n      break;\n  }\n}\n\nmodule.exports.propEach = propEach;\n/**\n * Lazily reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, coord) and returns\n * a new memo\n * @param {*} memo the starting value of memo: can be any type.\n */\n\nfunction propReduce(layer, callback, memo) {\n  propEach(layer, function (prop) {\n    memo = callback(memo, prop);\n  });\n  return memo;\n}\n\nmodule.exports.propReduce = propReduce;","map":null,"metadata":{},"sourceType":"script"}