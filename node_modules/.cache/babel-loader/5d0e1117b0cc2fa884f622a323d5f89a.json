{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ishu1\\\\OneDrive\\\\Documents\\\\MapBoxAPI_React\\\\mapbox\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ishu1\\\\OneDrive\\\\Documents\\\\MapBoxAPI_React\\\\mapbox\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Geocoder from './geocoder';\nimport template from 'lodash.template';\nimport isEqual from 'lodash.isequal';\nimport extent from 'turf-extent';\n\nvar fs = require('fs'); // substack/brfs#39\n\n\nvar tmpl = template(fs.readFileSync(__dirname + '/../templates/inputs.html', 'utf8'));\n/**\n * Inputs controller\n *\n * @param {HTMLElement} el Summary parent container\n * @param {Object} store A redux store\n * @param {Object} actions Actions an element can dispatch\n * @param {Object} map The mapboxgl instance\n * @private\n */\n\nvar Inputs = /*#__PURE__*/function () {\n  function Inputs(el, store, actions, map) {\n    _classCallCheck(this, Inputs);\n\n    var _store$getState = store.getState(),\n        originQuery = _store$getState.originQuery,\n        destinationQuery = _store$getState.destinationQuery,\n        profile = _store$getState.profile,\n        controls = _store$getState.controls;\n\n    el.innerHTML = tmpl({\n      originQuery: originQuery,\n      destinationQuery: destinationQuery,\n      profile: profile,\n      controls: controls\n    });\n    this.container = el;\n    this.actions = actions;\n    this.store = store;\n    this._map = map;\n    this.onAdd();\n    this.render();\n  }\n\n  _createClass(Inputs, [{\n    key: \"animateToCoordinates\",\n    value: function animateToCoordinates(mode, coords) {\n      var _this$store$getState = this.store.getState(),\n          origin = _this$store$getState.origin,\n          destination = _this$store$getState.destination,\n          routePadding = _this$store$getState.routePadding;\n\n      if (origin.geometry && destination.geometry && !isEqual(origin.geometry, destination.geometry)) {\n        // Animate map to fit bounds.\n        var bb = extent({\n          type: 'FeatureCollection',\n          features: [origin, destination]\n        });\n\n        this._map.fitBounds([[bb[0], bb[1]], [bb[2], bb[3]]], {\n          padding: routePadding\n        });\n      } else {\n        this._map.flyTo({\n          center: coords\n        });\n      }\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd() {\n      var _this = this;\n\n      var _this$actions = this.actions,\n          clearOrigin = _this$actions.clearOrigin,\n          clearDestination = _this$actions.clearDestination,\n          createOrigin = _this$actions.createOrigin,\n          createDestination = _this$actions.createDestination,\n          setProfile = _this$actions.setProfile,\n          reverse = _this$actions.reverse;\n\n      var _this$store$getState2 = this.store.getState(),\n          geocoder = _this$store$getState2.geocoder,\n          accessToken = _this$store$getState2.accessToken,\n          flyTo = _this$store$getState2.flyTo,\n          placeholderOrigin = _this$store$getState2.placeholderOrigin,\n          placeholderDestination = _this$store$getState2.placeholderDestination,\n          zoom = _this$store$getState2.zoom;\n\n      this.originInput = new Geocoder(Object.assign({}, {\n        accessToken: accessToken\n      }, geocoder, {\n        flyTo: flyTo,\n        placeholder: placeholderOrigin,\n        zoom: zoom\n      }));\n      var originEl = this.originInput.onAdd(this._map);\n      var originContainerEl = this.container.querySelector('#mapbox-directions-origin-input');\n      originContainerEl.appendChild(originEl);\n      this.destinationInput = new Geocoder(Object.assign({}, {\n        accessToken: accessToken\n      }, geocoder, {\n        flyTo: flyTo,\n        placeholder: placeholderDestination,\n        zoom: zoom\n      }));\n      var destinationEl = this.destinationInput.onAdd(this._map);\n      this.container.querySelector('#mapbox-directions-destination-input').appendChild(destinationEl);\n      this.originInput.on('result', function (e) {\n        var coords = e.result.center;\n        createOrigin(coords);\n\n        _this.animateToCoordinates('origin', coords);\n      });\n      this.originInput.on('clear', clearOrigin);\n      this.destinationInput.on('result', function (e) {\n        var coords = e.result.center;\n        createDestination(coords);\n\n        _this.animateToCoordinates('destination', coords);\n      });\n      this.destinationInput.on('clear', clearDestination); // Driving / Walking / Cycling profiles\n\n      var profiles = this.container.querySelectorAll('input[type=\"radio\"]');\n      Array.prototype.forEach.call(profiles, function (el) {\n        el.addEventListener('change', function () {\n          setProfile(el.value);\n        });\n      }); // Reversing Origin / Destination\n\n      this.container.querySelector('.js-reverse-inputs').addEventListener('click', function () {\n        var _this$store$getState3 = _this.store.getState(),\n            origin = _this$store$getState3.origin,\n            destination = _this$store$getState3.destination;\n\n        if (origin) _this.actions.queryDestination(origin.geometry.coordinates);\n        if (destination) _this.actions.queryOrigin(destination.geometry.coordinates);\n        reverse();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.store.subscribe(function () {\n        var _this2$store$getState = _this2.store.getState(),\n            originQuery = _this2$store$getState.originQuery,\n            destinationQuery = _this2$store$getState.destinationQuery,\n            originQueryCoordinates = _this2$store$getState.originQueryCoordinates,\n            destinationQueryCoordinates = _this2$store$getState.destinationQueryCoordinates;\n\n        if (originQuery) {\n          _this2.originInput.query(originQuery);\n\n          _this2.actions.queryOrigin(null);\n        }\n\n        if (destinationQuery) {\n          _this2.destinationInput.query(destinationQuery);\n\n          _this2.actions.queryDestination(null);\n        }\n\n        if (originQueryCoordinates) {\n          _this2.originInput.setInput(originQueryCoordinates);\n\n          _this2.animateToCoordinates('origin', originQueryCoordinates);\n\n          _this2.actions.queryOriginCoordinates(null);\n        }\n\n        if (destinationQueryCoordinates) {\n          _this2.destinationInput.setInput(destinationQueryCoordinates);\n\n          _this2.animateToCoordinates('destination', destinationQueryCoordinates);\n\n          _this2.actions.queryDestinationCoordinates(null);\n        }\n      });\n    }\n  }]);\n\n  return Inputs;\n}();\n\nexport { Inputs as default };","map":null,"metadata":{},"sourceType":"module"}