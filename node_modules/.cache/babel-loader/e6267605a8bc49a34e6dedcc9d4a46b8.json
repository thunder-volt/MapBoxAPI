{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"C:\\\\Users\\\\ishu1\\\\OneDrive\\\\Documents\\\\MapBoxAPI_React\\\\mapbox\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ishu1\\\\OneDrive\\\\Documents\\\\MapBoxAPI_React\\\\mapbox\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Typeahead from 'suggestions';\nimport debounce from 'lodash.debounce';\nimport { EventEmitter } from 'events';\nimport utils from '../utils'; // Geocoder - this slightly mimicks the mapboxl-gl-geocoder but isn't an exact replica.\n// Once gl-js plugins can be added to custom divs, we should be able to require mapbox-gl-geocoder\n// instead of including it here\n\nvar Geocoder = /*#__PURE__*/function () {\n  function Geocoder(options) {\n    _classCallCheck(this, Geocoder);\n\n    this._ev = new EventEmitter();\n    this.options = options;\n    this.api = options && options.api || 'https://api.mapbox.com/geocoding/v5/mapbox.places/';\n  }\n\n  _createClass(Geocoder, [{\n    key: \"onAdd\",\n    value: function onAdd(map) {\n      this._map = map;\n      this.request = new XMLHttpRequest(); // Template\n\n      var el = document.createElement('div');\n      el.className = 'mapboxgl-ctrl-geocoder';\n      var icon = document.createElement('span');\n      icon.className = 'geocoder-icon geocoder-icon-search';\n      var input = this._inputEl = document.createElement('input');\n      input.type = 'text';\n      input.placeholder = this.options.placeholder;\n      input.addEventListener('keydown', debounce(function (e) {\n        if (!e.target.value) return this._clearEl.classList.remove('active'); // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n\n        if (e.metaKey || [9, 27, 37, 39, 13, 38, 40].indexOf(e.keyCode) !== -1) return;\n\n        this._queryFromInput(e.target.value);\n      }.bind(this)), 200);\n      input.addEventListener('change', function (e) {\n        if (e.target.value) this._clearEl.classList.add('active');\n        var selected = this._typeahead.selected;\n\n        if (selected) {\n          if (this.options.flyTo) {\n            if (selected.bbox && selected.context && selected.context.length <= 3 || selected.bbox && !selected.context) {\n              var bbox = selected.bbox;\n              map.fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]]);\n            } else {\n              map.flyTo({\n                center: selected.center,\n                zoom: this.options.zoom\n              });\n            }\n          }\n\n          this._input = selected;\n          this.fire('result', {\n            result: selected\n          });\n        }\n      }.bind(this));\n      var actions = document.createElement('div');\n      actions.classList.add('geocoder-pin-right');\n      var clear = this._clearEl = document.createElement('button');\n      clear.className = 'geocoder-icon geocoder-icon-close';\n      clear.addEventListener('click', this._clear.bind(this));\n      var loading = this._loadingEl = document.createElement('span');\n      loading.className = 'geocoder-icon geocoder-icon-loading';\n      actions.appendChild(clear);\n      actions.appendChild(loading);\n      el.appendChild(icon);\n      el.appendChild(input);\n      el.appendChild(actions); // Override the control being added to control containers\n\n      if (this.options.container) this.options.position = false;\n      this._typeahead = new Typeahead(input, [], {\n        filter: false\n      });\n\n      this._typeahead.getItemValue = function (item) {\n        return item.place_name;\n      };\n\n      return el;\n    }\n  }, {\n    key: \"_geocode\",\n    value: function _geocode(q, callback) {\n      this._loadingEl.classList.add('active');\n\n      this.fire('loading');\n      var geocodingOptions = this.options;\n      var exclude = ['placeholder', 'zoom', 'flyTo', 'accessToken'];\n      var options = Object.keys(this.options).filter(function (key) {\n        return exclude.indexOf(key) === -1;\n      }).map(function (key) {\n        return key + '=' + geocodingOptions[key];\n      });\n      var accessToken = this.options.accessToken ? this.options.accessToken : mapboxgl.accessToken;\n      options.push('access_token=' + accessToken);\n      this.request.abort();\n      this.request.open('GET', this.api + encodeURIComponent(q.trim()) + '.json?' + options.join('&'), true);\n\n      this.request.onload = function () {\n        this._loadingEl.classList.remove('active');\n\n        if (this.request.status >= 200 && this.request.status < 400) {\n          var data = JSON.parse(this.request.responseText);\n\n          if (data.features.length) {\n            this._clearEl.classList.add('active');\n          } else {\n            this._clearEl.classList.remove('active');\n\n            this._typeahead.selected = null;\n          }\n\n          this.fire('results', {\n            results: data.features\n          });\n\n          this._typeahead.update(data.features);\n\n          return callback(data.features);\n        } else {\n          this.fire('error', {\n            error: JSON.parse(this.request.responseText).message\n          });\n        }\n      }.bind(this);\n\n      this.request.onerror = function () {\n        this._loadingEl.classList.remove('active');\n\n        this.fire('error', {\n          error: JSON.parse(this.request.responseText).message\n        });\n      }.bind(this);\n\n      this.request.send();\n    }\n  }, {\n    key: \"_queryFromInput\",\n    value: function _queryFromInput(q) {\n      q = q.trim();\n      if (!q) this._clear();\n\n      if (q.length > 2) {\n        this._geocode(q, function (results) {\n          this._results = results;\n        }.bind(this));\n      }\n    }\n  }, {\n    key: \"_change\",\n    value: function _change() {\n      var onChange = document.createEvent('HTMLEvents');\n      onChange.initEvent('change', true, false);\n\n      this._inputEl.dispatchEvent(onChange);\n    }\n  }, {\n    key: \"_query\",\n    value: function _query(input) {\n      if (!input) return;\n\n      if (typeof input === 'object' && input.length) {\n        input = [utils.wrap(input[0]), utils.wrap(input[1])].join();\n      }\n\n      this._geocode(input, function (results) {\n        if (!results.length) return;\n        var result = results[0];\n        this._results = results;\n        this._typeahead.selected = result;\n        this._inputEl.value = result.place_name;\n\n        this._change();\n      }.bind(this));\n    }\n  }, {\n    key: \"_setInput\",\n    value: function _setInput(input) {\n      if (!input) return;\n\n      if (typeof input === 'object' && input.length) {\n        input = [utils.roundWithOriginalPrecision(utils.wrap(input[0]), input[0]), utils.roundWithOriginalPrecision(utils.wrap(input[1]), input[1])].join();\n      } // Set input value to passed value and clear everything else.\n\n\n      this._inputEl.value = input;\n      this._input = null;\n      this._typeahead.selected = null;\n\n      this._typeahead.clear();\n\n      this._change();\n    }\n  }, {\n    key: \"_clear\",\n    value: function _clear() {\n      this._input = null;\n      this._inputEl.value = '';\n      this._typeahead.selected = null;\n\n      this._typeahead.clear();\n\n      this._change();\n\n      this._inputEl.focus();\n\n      this._clearEl.classList.remove('active');\n\n      this.fire('clear');\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      return this._input;\n    }\n    /**\n     * Set & query the input\n     * @param {Array|String} query An array of coordinates [lng, lat] or location name as a string.\n     * @returns {Geocoder} this\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(_query2) {\n      this._query(_query2);\n\n      return this;\n    }\n    /**\n     * Set input\n     * @param {Array|String} value An array of coordinates [lng, lat] or location name as a string. Calling this function just sets the input and does not trigger an API request.\n     * @returns {Geocoder} this\n     */\n\n  }, {\n    key: \"setInput\",\n    value: function setInput(value) {\n      this._setInput(value);\n\n      return this;\n    }\n    /**\n     * Subscribe to events that happen within the plugin.\n     * @param {String} type name of event. Available events and the data passed into their respective event objects are:\n     *\n     * - __clear__ `Emitted when the input is cleared`\n     * - __loading__ `Emitted when the geocoder is looking up a query`\n     * - __results__ `{ results } Fired when the geocoder returns a response`\n     * - __result__ `{ result } Fired when input is set`\n     * - __error__ `{ error } Error as string`\n     * @param {Function} fn function that's called when the event is emitted.\n     * @returns {Geocoder} this;\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(type, fn) {\n      this._ev.on(type, fn);\n\n      this._ev.on('error', function (err) {\n        console.log(err);\n      });\n\n      return this;\n    }\n    /**\n     * Fire an event\n     * @param {String} type event name.\n     * @param {Object} data event data to pass to the function subscribed.\n     * @returns {Geocoder} this\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire(type, data) {\n      this._ev.emit(type, data);\n\n      return this;\n    }\n    /**\n     * Remove an event\n     * @returns {Geocoder} this\n     * @param {String} type Event name.\n     * @param {Function} fn Function that should unsubscribe to the event emitted.\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(type, fn) {\n      this._ev.removeListener(type, fn);\n\n      return this;\n    }\n  }]);\n\n  return Geocoder;\n}();\n\nexport { Geocoder as default };\n;","map":null,"metadata":{},"sourceType":"module"}